/* --------------------
   Case Study Questions
   --------------------*/

-- 1. What is the total amount each customer spent at the restaurant?
-- 2. How many days has each customer visited the restaurant?
-- 3. What was the first item from the menu purchased by each customer?
-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?
-- 5. Which item was the most popular for each customer?
-- 6. Which item was purchased first by the customer after they became a member?
-- 7. Which item was purchased just before the customer became a member?
-- 8. What is the total items and amount spent for each member before they became a member?
-- 9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?

-- Example Query:
-- SELECT
--   	product_id,
--     product_name,
--     price
-- FROM dannys_diner.menu
-- ORDER BY price DESC
-- LIMIT 5;

-- 1. What is the total amount each customer spent at the restaurant?
-- SELECT 
-- 	customer_id, 
--     SUM(price)
-- FROM dannys_diner.sales
-- JOIN 
-- 	dannys_diner.menu 
-- 	ON dannys_diner.menu.product_id = dannys_diner.sales.product_id
-- GROUP BY customer_id
-- ORDER BY customer_id

-- -- 2. How many days has each customer visited the restaurant?
-- SELECT 
-- 	customer_id, 
--     COUNT(DISTINCT(order_date)) AS days
-- FROM dannys_diner.sales
-- GROUP BY 
-- 	customer_id


-- ** 3. What was the first item from the menu purchased by each customer?
-- WITH CTE AS 
-- (
--   SELECT
--       customer_id, order_date, product_name,
--       RANK() OVER (
--         PARTITION BY customer_id 
--         ORDER BY order_date
--       ) AS rnk , 
--       ROW_NUMBER() OVER (
--         PARTITION BY customer_id 
--         ORDER BY order_date
--       ) AS row_num
--   FROM dannys_diner.sales AS S
--   JOIN dannys_diner.menu AS M 
--   ON M.product_id = S.product_id
--   GROUP BY customer_id, order_date, product_name
--   ORDER BY customer_id  
--  )
--  SELECT * 
--  FROM CTE
--  WHERE rnk =1
 



-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?

-- SELECT product_name , COUNT(dannys_diner.sales.product_id) AS count
-- FROM dannys_diner.menu
-- JOIN dannys_diner.sales ON 
-- 	dannys_diner.sales.product_id = dannys_diner.menu.product_id
-- GROUP BY product_name
-- ORDER BY count DESC
-- LIMIT 1;

-- -- *** 5. Which item was the most popular for each customer?

-- WITH CTE AS (

--   SELECT 
--       customer_id, 
--       product_name, 
--       COUNT(S.product_id),
--       RANK() OVER (
--         PARTITION BY customer_id
--         ORDER BY COUNT(S.product_id) DESC
--       ) AS rnk,
--       ROW_NUMBER() OVER (
--         PARTITION BY customer_id
--         ORDER BY COUNT(S.product_id) DESC
--       ) AS row_num
--   FROM dannys_diner.sales AS S
--   JOIN dannys_diner.menu AS M 
--       ON 
--       M.product_id = S.product_iD
--   GROUP BY 
--       customer_id, 
--       product_name
--   ORDER BY 
--       customer_id
-- )
-- SELECT * FROM CTE
-- WHERE rnk=1

-- 6. Which item was purchased first by the customer AFTER they became a member?
-- SELECT 
-- * 
-- FROM (
--     WITH CTE AS (
--       SELECT 
--         S.customer_id, 
--         S.order_date, 
--         product_name 
--       FROM 
--           dannys_diner.sales AS S  
--       LEFT JOIN 
--         dannys_diner.menu AS MU 
--       ON 
--         MU.product_ID = S.product_id
--       ORDER BY 
--         S.customer_id, 
--         S.order_date  
--     )
--     SELECT 
--         S.customer_ID, 
--         S.order_date, 
--         S.product_name,
--         RANK() OVER (
--           PARTITION BY S.customer_id
--           ORDER BY S.order_date
--         ) AS rnk

--     FROM CTE AS S
--     JOIN 
--         dannys_diner.members AS MU
--     ON 
--         MU.customer_ID =S.customer_ID
--     WHERE 
--         order_date >= MU.join_date

--     ) 
-- AS tbl 
-- WHERE rnk=1

-- 7. Which item was purchased just before the customer became a member?

-- WITH CTE AS
-- (
--   SELECT 
--       S.customer_id, 
--       S.order_date, 
--       S.product_id,
--       M.join_date,
--       (S.order_date-M.join_date) AS days,
--       RANK() OVER (
--         PARTITION BY S.customer_id
--         ORDER BY -(S.order_date-M.join_date) ) 
--         AS rnk
--   FROM 
--       dannys_diner.sales AS S
--   RIGHT JOIN 
--   		dannys_diner.members AS M
--       	ON 
--   		M.customer_id =S.customer_ID
--   WHERE 
--   		S.order_date < M.join_date
--   ORDER BY 
--   		S.customer_id, days DESC
-- )
-- SELECT 
-- 	CTE.customer_id, 
--     CTE.order_date, 
--     MU.product_name
-- FROM CTE
-- JOIN 
-- 	dannys_diner.menu AS MU 
-- ON 
-- 	MU.product_id = CTE.product_ID
-- WHERE 
-- 	rnk = 1

-- 8. What is the total items and amount spent for each member before they became a member?

-- WITH CTE AS (
--   SELECT 
--       S.customer_id, 
--       S.product_id,
--       COUNT(S.product_id)

--   FROM 
--       dannys_diner.sales AS S
--   INNER JOIN 
--   		dannys_diner.members AS M
--       	ON 
--   		M.customer_id =S.customer_ID
--   WHERE 
--   		S.order_date < M.join_date
--   GROUP BY
--   		S.customer_id, S.product_id
--   ORDER BY 
--   		S.customer_id
   
-- )
-- SELECT CTE.customer_ID, SUM(CTE.count) AS items_ordered,
-- SUM(CTE.count * MU.price) AS total_spent
-- FROM CTE 
-- JOIN dannys_diner.menu AS MU
-- ON MU.product_id = CTE.product_ID
-- GROUP BY customer_id
-- ORDER BY customer_id

-- 9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?

-- WITH CTE AS
-- (
--     SELECT 
--         S.customer_ID, 
--         product_name, 
--         price,
--         CASE 
--             WHEN product_name LIKE 'sushi' THEN 2
--             ELSE 1 
--         END AS multiplier
--     FROM dannys_diner.sales AS S
--     JOIN dannys_diner.menu AS MU
--     ON S.product_id = MU.product_id
-- )
-- SELECT customer_id, SUM(price * multiplier) AS points
-- FROM CTE
-- GROUP BY customer_id
-- ORDER BY points DESC


-- AS tbl
-- GROUP BY customer_id

-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?

-- WITH CTE AS
-- (
-- 	SELECT 
--           S.customer_ID, 
--           S.order_date,
--           product_name, 
--           price,
--           M.join_date,
--           (S.order_date - M.join_date ) AS days,
--           CASE 
--               WHEN product_name LIKE 'sushi' 
--               	OR  (S.order_date - M.join_date ) BETWEEN 0 AND 7 
--               THEN 2
--               ELSE 1 
--           END AS multiplier
--       FROM dannys_diner.sales AS S
--       JOIN dannys_diner.menu AS MU
--       ON S.product_id = MU.product_id
--       INNER JOIN dannys_diner.members as M
--       ON M.customer_id = S.customer_id
--       ORDER BY S.customer_id, S.order_date
--  ) 
--  SELECT customer_id, SUM(price*multiplier) AS total_spent
--  FROM CTE
--  GROUP BY customer_id

--BONUS 1---
-- customer_id, order_date, product_name, price, member


-- SELECT 
-- 	S.customer_id, 
--     S.order_date, 
--     MU.product_name, 
--     MU.price, 
--   	CASE 	
--     	WHEN (S.order_date-M.join_date)>=0 THEN 'Y'
--    		WHEN (S.order_date-M.join_date)< 0 THEN 'N'
--   		ELSE 'N' END AS member
      
-- FROM dannys_diner.sales AS S
-- JOIN dannys_diner.menu AS MU
-- ON MU.product_id = S.product_id
-- LEFT JOIN dannys_diner.members AS M 
-- ON M.customer_id = S.customer_id
-- ORDER BY S.customer_id, S.order_date, MU.price DESC

--BONUS 2---Rank All The Things
-- Danny also requires further information about the ranking of customer products, but he purposely does not need the ranking for non-member purchases so he expects null ranking values for the records when customers are not yet part of the loyalty program.
-- customer_id	order_date	product_name	price	member	ranking


WITH CTE AS
(
SELECT 
	S.customer_id, 
    S.order_date, 
    MU.product_name, 
    MU.price, 
  	CASE 	
    	WHEN (S.order_date-M.join_date)>=0 THEN 'Y'
   		WHEN (S.order_date-M.join_date)< 0 THEN 'N'
  		ELSE 'N' END AS member

      
FROM dannys_diner.sales AS S

JOIN dannys_diner.menu AS MU
ON MU.product_id = S.product_id
LEFT JOIN dannys_diner.members AS M 
ON M.customer_id = S.customer_id
ORDER BY S.customer_id, S.order_date, MU.price DESC

) 

SELECT *,
	CASE  WHEN CTE.member = 'N' THEN Null
	ELSE RANK() OVER (
      	PARTITION BY customer_id, member
      	ORDER BY customer_id, order_date, price DESC
      ) 
   	END AS rnk
  
FROM CTE
